{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"2588598c-369a-5047-8b21-374ae5c0498b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    title: \"Angular for React Devs and Vice Versa\",\n    mdxType: \"Head\"\n  }), mdx(\"h1\", null, \"Angular for React Devs and Vice Versa\"), mdx(\"p\", null, \"UI Meetup\"), mdx(\"p\", null, \"By Phani Rahul Sivalenka\"), mdx(\"div\", {\n    className: \"row\"\n  }, mdx(Link, {\n    className: \"row-item\",\n    to: \"/1\",\n    mdxType: \"Link\"\n  }, \"Part 1: Basics\"), mdx(Link, {\n    className: \"row-item\",\n    to: \"/20\",\n    mdxType: \"Link\"\n  }, \"Part 2: Advanced\"), mdx(Link, {\n    className: \"row-item\",\n    to: \"/42\",\n    mdxType: \"Link\"\n  }, \"Part 3: Advanced Continued\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Part 1: BASICS\"), mdx(\"h4\", null, \"30th Nov 2020\"), mdx(\"hr\", null), mdx(\"h1\", null, \"BASICS\"), mdx(\"h2\", null, \"How to define a component?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4:11 subtitle=\\\"define it as a function\\\" file=./samples/react/MyComp.js\",\n    \"4:11\": true,\n    \"subtitle\": \"\\\"define\",\n    \"it\": true,\n    \"as\": true,\n    \"a\": true,\n    \"function\\\"\": true,\n    \"file\": \"./samples/react/MyComp.js\"\n  }), \"import React from 'react';\\nimport './MyComp.css';\\n\\nconst MyComp = () => {\\n  return (\\n    <div>\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts true\",\n    \"metastring\": \"3:15 subtitle=\\\"define it as a class decorated with '@Component()' decorator\\\" file=./samples/ng/inner-comp/inner-comp.component.ts\",\n    \"3:15\": true,\n    \"subtitle\": \"\\\"define\",\n    \"it\": true,\n    \"as\": true,\n    \"a\": true,\n    \"decorated\": true,\n    \"with\": true,\n    \"'@Component()'\": true,\n    \"decorator\\\"\": true,\n    \"file\": \"./samples/ng/inner-comp/inner-comp.component.ts\"\n  }), \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:9 subtitle=\\\"template lives inside the component definition and cannot be externalized\\\"\",\n    \"5:9\": true,\n    \"subtitle\": \"\\\"template\",\n    \"lives\": true,\n    \"inside\": true,\n    \"the\": true,\n    \"component\": true,\n    \"definition\": true,\n    \"and\": true,\n    \"cannot\": true,\n    \"be\": true,\n    \"externalized\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 subtitle=\\\"template can be an external html file (preferred)\\\"\",\n    \"subtitle\": \"\\\"template\",\n    \"can\": true,\n    \"be\": true,\n    \"an\": true,\n    \"external\": true,\n    \"html\": true,\n    \"file\": true,\n    \"(preferred)\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:9 subtitle=\\\"template lives inside the component definition and cannot be externalized\\\"\",\n    \"5:9\": true,\n    \"subtitle\": \"\\\"template\",\n    \"lives\": true,\n    \"inside\": true,\n    \"the\": true,\n    \"component\": true,\n    \"definition\": true,\n    \"and\": true,\n    \"cannot\": true,\n    \"be\": true,\n    \"externalized\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-file\",\n    \"metastring\": \"5:10 subtitle=\\\"template can be in the same file\\\"  file=./samples/ng/my-inline-comp/my-inline-comp.component.ts\",\n    \"5:10\": true,\n    \"subtitle\": \"\\\"template\",\n    \"can\": true,\n    \"be\": true,\n    \"in\": true,\n    \"the\": true,\n    \"same\": true,\n    \"file\\\"\": true,\n    \"\": true,\n    \"file\": \"./samples/ng/my-inline-comp/my-inline-comp.component.ts\"\n  }), \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  template: `\\n    <div>\\n      <h1>My Angular Inline Template</h1>\\n      <p style=\\\"color: blue;\\\">Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  `,\\n  styles: [\\n    `\\n      div {\\n        color: red;\\n      }\\n    `,\\n  ],\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Syntax\",\n    mdxType: \"Step\"\n  }, mdx(ComparisonColumn, {\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Language : JavaScript / \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), \"TypeScript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Template Syntax : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/introducing-jsx.html\"\n  }), \"JSX\")))), mdx(ComparisonColumn, {\n    fw: \"ng\",\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Language : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), \"TypeScript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Template Syntax : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://angular.io/guide/template-syntax\"\n  }), \"Extended HTML\")))))), mdx(\"hr\", null), mdx(\"h1\", null, \"BASICS\"), mdx(\"h2\", null, \"How to use the component defined?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4[7:13] subtitle=\\\"use the component name as element. (should be in PascalCase)\\\" file=./samples/react/MyComp.js\",\n    \"4[7:13]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"component\": true,\n    \"name\": true,\n    \"as\": true,\n    \"element.\": true,\n    \"(should\": true,\n    \"be\": true,\n    \"in\": true,\n    \"PascalCase)\\\"\": true,\n    \"file\": \"./samples/react/MyComp.js\"\n  }), \"import React from 'react';\\nimport './MyComp.css';\\n\\nconst MyComp = () => {\\n  return (\\n    <div>\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4[14:21] subtitle=\\\"use the selector as element\\\" file=./samples/ng/inner-comp/inner-comp.component.ts\",\n    \"4[14:21]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"selector\": true,\n    \"as\": true,\n    \"element\\\"\": true,\n    \"file\": \"./samples/ng/inner-comp/inner-comp.component.ts\"\n  }), \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\"))), mdx(Step, {\n    title: \"Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"use the component name as element. (should be in PascalCase)\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"component\": true,\n    \"name\": true,\n    \"as\": true,\n    \"element.\": true,\n    \"(should\": true,\n    \"be\": true,\n    \"in\": true,\n    \"PascalCase)\\\"\": true\n  }), \"<MyComp />;\\n{\\n  /* or */\\n}\\n<MyComp></MyComp>;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"use the selector as element (close tag cannot be self closing)\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"selector\": true,\n    \"as\": true,\n    \"element\": true,\n    \"(close\": true,\n    \"tag\": true,\n    \"cannot\": true,\n    \"be\": true,\n    \"self\": true,\n    \"closing)\\\"\": true\n  }), \"<my-comp></my-comp>\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"BASICS\"), mdx(\"h2\", null, \"How to style?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Styling\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 subtitle=\\\"import an external CSS file (styles leak here)\\\" file=./samples/react/MyComp.js\",\n    \"subtitle\": \"\\\"import\",\n    \"an\": true,\n    \"external\": true,\n    \"CSS\": true,\n    \"file\": \"./samples/react/MyComp.js\",\n    \"(styles\": true,\n    \"leak\": true,\n    \"here)\\\"\": true\n  }), \"import React from 'react';\\nimport './MyComp.css';\\n\\nconst MyComp = () => {\\n  return (\\n    <div>\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"6 subtitle=\\\"link to an external CSS file (by default non-leaking)\\\" file=./samples/ng/inner-comp/inner-comp.component.ts\",\n    \"subtitle\": \"\\\"link\",\n    \"to\": true,\n    \"an\": true,\n    \"external\": true,\n    \"CSS\": true,\n    \"file\": \"./samples/ng/inner-comp/inner-comp.component.ts\",\n    \"(by\": true,\n    \"default\": true,\n    \"non-leaking)\\\"\": true\n  }), \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\"))), mdx(Step, {\n    title: \"Styling\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 subtitle=\\\"import an external CSS file (styles leak here)\\\" file=./samples/react/MyComp.js\",\n    \"subtitle\": \"\\\"import\",\n    \"an\": true,\n    \"external\": true,\n    \"CSS\": true,\n    \"file\": \"./samples/react/MyComp.js\",\n    \"(styles\": true,\n    \"leak\": true,\n    \"here)\\\"\": true\n  }), \"import React from 'react';\\nimport './MyComp.css';\\n\\nconst MyComp = () => {\\n  return (\\n    <div>\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1[29:46],7 subtitle=\\\"to make Angular leak styles, we can set view encapsulation to 'None'\\\" file=./samples/ng/inner-comp-leaking/inner-comp.component.ts\",\n    \"1[29:46],7\": true,\n    \"subtitle\": \"\\\"to\",\n    \"make\": true,\n    \"Angular\": true,\n    \"leak\": true,\n    \"styles,\": true,\n    \"we\": true,\n    \"can\": true,\n    \"set\": true,\n    \"view\": true,\n    \"encapsulation\": true,\n    \"to\": true,\n    \"'None'\\\"\": true,\n    \"file\": \"./samples/ng/inner-comp-leaking/inner-comp.component.ts\"\n  }), \"import { Component, OnInit, ViewEncapsulation } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n  encapsulation: ViewEncapsulation.None,\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\"))), mdx(Step, {\n    title: \"Styling: In the same file\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6:8 subtitle=\\\"define inline using CSS-in-JS\\\" file=./samples/react/MyCompInline.js\",\n    \"6:8\": true,\n    \"subtitle\": \"\\\"define\",\n    \"inline\": true,\n    \"using\": true,\n    \"CSS-in-JS\\\"\": true,\n    \"file\": \"./samples/react/MyCompInline.js\"\n  }), \"import React from 'react';\\n\\nconst MyComp = () => {\\n  return (\\n    <div\\n      style={{\\n        color: 'red',\\n      }}\\n    >\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"8[10:30],11:17 subtitle=\\\"define in the same file or inline\\\" file=./samples/ng/my-inline-comp/my-inline-comp.component.ts\",\n    \"8[10:30],11:17\": true,\n    \"subtitle\": \"\\\"define\",\n    \"in\": true,\n    \"the\": true,\n    \"same\": true,\n    \"file\": \"./samples/ng/my-inline-comp/my-inline-comp.component.ts\",\n    \"or\": true,\n    \"inline\\\"\": true\n  }), \"import { Component, OnInit } from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  template: `\\n    <div>\\n      <h1>My Angular Inline Template</h1>\\n      <p style=\\\"color: blue;\\\">Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  `,\\n  styles: [\\n    `\\n      div {\\n        color: red;\\n      }\\n    `,\\n  ],\\n})\\nexport class MyCompComponent implements OnInit {\\n  constructor() {}\\n\\n  ngOnInit(): void {}\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Styling: More Options\",\n    mdxType: \"Step\"\n  }, mdx(ComparisonColumn, {\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/\"\n  }), \"CSS Modules (available in Create React App (CRA) by default)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://styled-components.com/\"\n  }), \"Styled Components\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://material-ui.com/styles/basics/\"\n  }), \"Material UI Styling\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can also be setup to use any kind of CSS pre-processor\"))), mdx(ComparisonColumn, {\n    fw: \"ng\",\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS\"\n  }), \"CSS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://sass-lang.com/\"\n  }), \"SCSS/SASS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://lesscss.org/\"\n  }), \"Less\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stylus-lang.com/\"\n  }), \"Stylus\")))))), mdx(\"hr\", null), mdx(\"h1\", null, \"BASICS\"), mdx(\"h2\", null, \"How to communicate between components?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Inputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3[16:21],4[11:15] subtitle=\\\"use 'props' for inputs\\\" file=./samples/react/MyCompWithoutPropsDestructuring.js\",\n    \"3[16:21],4[11:15]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"'props'\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/react/MyCompWithoutPropsDestructuring.js\"\n  }), \"import React, { useEffect, useState } from 'react';\\n\\nconst MyComp = props => {\\n  const { name, onNameChange } = props;\\n\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 subtitle=\\\"use '@Input()' decorator for inputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Input()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Inputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 subtitle=\\\"note that 'props' here is an object from which we are extracting our inputs\\\"\",\n    \"subtitle\": \"\\\"note\",\n    \"that\": true,\n    \"'props'\": true,\n    \"here\": true,\n    \"is\": true,\n    \"an\": true,\n    \"object\": true,\n    \"from\": true,\n    \"which\": true,\n    \"we\": true,\n    \"are\": true,\n    \"extracting\": true,\n    \"our\": true,\n    \"inputs\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 subtitle=\\\"use '@Input()' decorator for inputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Input()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Inputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3[19:23] subtitle=\\\"can also be direclty destructured\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"3[19:23]\": true,\n    \"subtitle\": \"\\\"can\",\n    \"also\": true,\n    \"be\": true,\n    \"direclty\": true,\n    \"destructured\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 subtitle=\\\"use '@Input()' decorator for inputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Input()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Inputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3:4,8[42:46] subtitle=\\\"in TypeScript prop types are defined as interfaces separately\\\" file=./samples/react/MyComp/MyComp.tsx\",\n    \"3:4,8[42:46]\": true,\n    \"subtitle\": \"\\\"in\",\n    \"TypeScript\": true,\n    \"prop\": true,\n    \"types\": true,\n    \"are\": true,\n    \"defined\": true,\n    \"as\": true,\n    \"interfaces\": true,\n    \"separately\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.tsx\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\ninterface MyCompProps {\\n  name: string;\\n  onNameChange: () => void;\\n}\\n\\nconst MyComp: React.FC<MyCompProps> = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  return <div>MyComp</div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 subtitle=\\\"use '@Input()' decorator for inputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Input()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Inputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8[15:36] subtitle=\\\"and use that type in the component\\\"\",\n    \"8[15:36]\": true,\n    \"subtitle\": \"\\\"and\",\n    \"use\": true,\n    \"that\": true,\n    \"type\": true,\n    \"in\": true,\n    \"the\": true,\n    \"component\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 subtitle=\\\"use '@Input()' decorator for inputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Input()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"inputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Inputs: Binding\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"43[14:20] subtitle=\\\"bind in JSX using curly braces ({...})\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"43[14:20]\": true,\n    \"subtitle\": \"\\\"bind\",\n    \"in\": true,\n    \"JSX\": true,\n    \"using\": true,\n    \"curly\": true,\n    \"braces\": true,\n    \"({...})\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2[27:35] subtitle=\\\"bind in the html using double curly braces ({{...}})\\\" file=./samples/ng/my-comp/my-comp.component.html\",\n    \"2[27:35]\": true,\n    \"subtitle\": \"\\\"bind\",\n    \"in\": true,\n    \"the\": true,\n    \"html\": true,\n    \"using\": true,\n    \"double\": true,\n    \"curly\": true,\n    \"braces\": true,\n    \"({{...}})\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.html\"\n  }), \"<div>\\n  <h1>My Angular Template {{name}}</h1>\\n  <p>Lorem ipsum dolor sit amet.</p>\\n  {{count}}\\n</div>\\n\"))), mdx(Step, {\n    title: \"Inputs: Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1[9:24] subtitle=\\\"'Batman' string value is assigned to 'name' prop using curly braces ({})\\\"\",\n    \"1[9:24]\": true,\n    \"subtitle\": \"\\\"'Batman'\",\n    \"string\": true,\n    \"value\": true,\n    \"is\": true,\n    \"assigned\": true,\n    \"to\": true,\n    \"'name'\": true,\n    \"prop\": true,\n    \"using\": true,\n    \"curly\": true,\n    \"braces\": true,\n    \"({})\\\"\": true\n  }), \"<MyComp name={'Batman'} />\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2[10:27] subtitle=\\\"'Batman' string value is assigned to 'name' input using property binding (square brackets; []).\\\"\",\n    \"2[10:27]\": true,\n    \"subtitle\": \"\\\"'Batman'\",\n    \"string\": true,\n    \"value\": true,\n    \"is\": true,\n    \"assigned\": true,\n    \"to\": true,\n    \"'name'\": true,\n    \"input\": true,\n    \"using\": true,\n    \"property\": true,\n    \"binding\": true,\n    \"(square\": true,\n    \"brackets;\": true,\n    \"[]).\\\"\": true\n  }), \"<!-- Property binding -->\\n<my-comp [name]=\\\"'Batman'\\\"></my-comp>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Outputs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3[25:37] subtitle=\\\"use 'prop functions' for outputs\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"3[25:37]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"'prop\": true,\n    \"functions'\": true,\n    \"for\": true,\n    \"outputs\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"34\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"34 subtitle=\\\"use '@Output()' decorator for outputs\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'@Output()'\": true,\n    \"decorator\": true,\n    \"for\": true,\n    \"outputs\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Outputs: Raising the event\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"30\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"30 subtitle=\\\"call it as any other JS function call\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"subtitle\": \"\\\"call\",\n    \"it\": true,\n    \"as\": true,\n    \"any\": true,\n    \"other\": true,\n    \"JS\": true,\n    \"function\": true,\n    \"call\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"73\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"73 subtitle=\\\"use 'emit' method on EventEmitter to raise the event\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"'emit'\": true,\n    \"method\": true,\n    \"on\": true,\n    \"EventEmitter\": true,\n    \"to\": true,\n    \"raise\": true,\n    \"the\": true,\n    \"event\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Outputs: Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3\"\n  }), \"<MyComp\\n  name={'Batman'}\\n  onNameChange={e => console.log('name has changed', e)}\\n/>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2[28:67]\",\n    \"2[28:67]\": true\n  }), \"<!-- Event Binding -->\\n<my-comp [name]=\\\"'Batman'\\\" (nameChange)=\\\"handleNameChange($event)\\\"\\n  ><my-comp></my-comp\\n></my-comp>\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"BASICS\"), mdx(\"h2\", null, \"How do we maintain state?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Component State\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4 subtitle=\\\"define it using a special 'useState' hook which gives the current value of state (count) and a setter function (setCount)\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"subtitle\": \"\\\"define\",\n    \"it\": true,\n    \"using\": true,\n    \"a\": true,\n    \"special\": true,\n    \"'useState'\": true,\n    \"hook\": true,\n    \"which\": true,\n    \"gives\": true,\n    \"the\": true,\n    \"current\": true,\n    \"value\": true,\n    \"of\": true,\n    \"state\": true,\n    \"(count)\": true,\n    \"and\": true,\n    \"setter\": true,\n    \"function\": true,\n    \"(setCount)\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"36\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"36 subtitle=\\\"define it as plain member of the class\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"it\": true,\n    \"as\": true,\n    \"plain\": true,\n    \"member\": true,\n    \"of\": true,\n    \"the\": true,\n    \"class\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"Component State: Changing the state\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"34:38 subtitle=\\\"call the setter function that is destructured out of useState call\\\" file=./samples/react/MyComp/MyComp.js\",\n    \"34:38\": true,\n    \"subtitle\": \"\\\"call\",\n    \"the\": true,\n    \"setter\": true,\n    \"function\": true,\n    \"that\": true,\n    \"is\": true,\n    \"destructured\": true,\n    \"out\": true,\n    \"of\": true,\n    \"useState\": true,\n    \"call\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = ({ name, onNameChange }) => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // Do something on name change\\n  }, [name]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // Do something on changing\\n    // name or count\\n  }, [name, count]);\\n\\n  const onChangeNameClick = () => {\\n    const newName = getRandomName();\\n    onNameChange(newName);\\n  };\\n\\n  const increment = () => {\\n    // Using the closure 'count' variable\\n    setCount(count + 1);\\n    // or by passing a callback\\n    // which gets latest value of count 'c'\\n    // setCount(c => c + 1);\\n  };\\n\\n  return (\\n    <div>\\n      MyComp {name}\\n      <button onClick={onChangeNameClick}>Change Name</button>\\n      {count}\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"77\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"77 subtitle=\\\"use simple assignment\\\" file=./samples/ng/my-comp/my-comp.component.ts\",\n    \"subtitle\": \"\\\"use\",\n    \"simple\": true,\n    \"assignment\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n  Output,\\n  EventEmitter,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Output() nameChange = new EventEmitter<string>();\\n\\n  count: number = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {}\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n\\n  onNameChangeClick() {\\n    const newName = getRandomName();\\n    this.nameChange.emit(newName);\\n  }\\n\\n  increment() {\\n    this.count = this.count + 1;\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"What if our components do not have a 'parent-child' relationship?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(ComparisonColumn, {\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"h2\", null, \"React Context\")), mdx(ComparisonColumn, {\n    fw: \"ng\",\n    mdxType: \"ComparisonColumn\"\n  }, mdx(\"h2\", null, \"Angular Services\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"define the context\\\" file=./samples/react/CartProvider.js\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"context\\\"\": true,\n    \"file\": \"./samples/react/CartProvider.js\"\n  }), \"import React from 'react';\\n\\nexport const CartContext = React.createContext(null);\\n\\nexport const CartProvider = ({ children }) => {\\n  const [items, setItems] = React.useState([]);\\n\\n  // Code to fetch and set the items\\n\\n  return (\\n    <CartContext.Provider value={{ items, count: items.length }}>\\n      {children}\\n    </CartContext.Provider>\\n  );\\n};\\n\\nexport const useCart = () => React.useContext(CartContext);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"define the service\\\" file=./samples/ng/cart.service.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"service\\\"\": true,\n    \"file\": \"./samples/ng/cart.service.ts\"\n  }), \"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class CartService {\\n  items: CartItem[] = [];\\n\\n  get count() {\\n    return this.items.length;\\n  }\\n\\n  // Code to fetch and set the items\\n}\\n\"))), mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"there are three parts to a context definition\\\"\",\n    \"subtitle\": \"\\\"there\",\n    \"are\": true,\n    \"three\": true,\n    \"parts\": true,\n    \"to\": true,\n    \"a\": true,\n    \"context\": true,\n    \"definition\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"define the service\\\" file=./samples/ng/cart.service.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"service\\\"\": true,\n    \"file\": \"./samples/ng/cart.service.ts\"\n  }), \"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class CartService {\\n  items: CartItem[] = [];\\n\\n  get count() {\\n    return this.items.length;\\n  }\\n\\n  // Code to fetch and set the items\\n}\\n\"))), mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"1. create the context\\\"\",\n    \"subtitle\": \"\\\"1.\",\n    \"create\": true,\n    \"the\": true,\n    \"context\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"define the service\\\" file=./samples/ng/cart.service.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"service\\\"\": true,\n    \"file\": \"./samples/ng/cart.service.ts\"\n  }), \"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class CartService {\\n  items: CartItem[] = [];\\n\\n  get count() {\\n    return this.items.length;\\n  }\\n\\n  // Code to fetch and set the items\\n}\\n\"))), mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:15 subtitle=\\\"2. create the corresponding provider\\\"\",\n    \"5:15\": true,\n    \"subtitle\": \"\\\"2.\",\n    \"create\": true,\n    \"the\": true,\n    \"corresponding\": true,\n    \"provider\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"define the service\\\" file=./samples/ng/cart.service.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"service\\\"\": true,\n    \"file\": \"./samples/ng/cart.service.ts\"\n  }), \"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class CartService {\\n  items: CartItem[] = [];\\n\\n  get count() {\\n    return this.items.length;\\n  }\\n\\n  // Code to fetch and set the items\\n}\\n\"))), mdx(Step, {\n    title: \"Communication Between Unrelated Components\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"17 subtitle=\\\"3. expose a custom hook to be used to access the values in the context\\\"\",\n    \"subtitle\": \"\\\"3.\",\n    \"expose\": true,\n    \"a\": true,\n    \"custom\": true,\n    \"hook\": true,\n    \"to\": true,\n    \"be\": true,\n    \"used\": true,\n    \"access\": true,\n    \"the\": true,\n    \"values\": true,\n    \"in\": true,\n    \"context\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"define the service\\\" file=./samples/ng/cart.service.ts\",\n    \"subtitle\": \"\\\"define\",\n    \"the\": true,\n    \"service\\\"\": true,\n    \"file\": \"./samples/ng/cart.service.ts\"\n  }), \"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class CartService {\\n  items: CartItem[] = [];\\n\\n  get count() {\\n    return this.items.length;\\n  }\\n\\n  // Code to fetch and set the items\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Usage: Provide It\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6:8 subtitle=\\\"provide the context in the root or in any other component\\\" file=./samples/react/UsingContext.js\",\n    \"6:8\": true,\n    \"subtitle\": \"\\\"provide\",\n    \"the\": true,\n    \"context\": true,\n    \"in\": true,\n    \"root\": true,\n    \"or\": true,\n    \"any\": true,\n    \"other\": true,\n    \"component\\\"\": true,\n    \"file\": \"./samples/react/UsingContext.js\"\n  }), \"import React from 'react';\\nimport { CartProvider, useCart } from './CartProvider';\\n\\nfunction App() {\\n  return (\\n    <CartProvider>\\n      <Child />\\n    </CartProvider>\\n  );\\n}\\n\\nfunction Child() {\\n  const { items, count } = useCart();\\n\\n  return <div>Cart: {count}</div>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"10 subtitle=\\\"provide the service in root module or any sub modules or in a component (@Component() decorator's 'providers' property)\\\" file=./samples/ng/using-service.module.ts\",\n    \"subtitle\": \"\\\"provide\",\n    \"the\": true,\n    \"service\": true,\n    \"in\": true,\n    \"root\": true,\n    \"module\": true,\n    \"or\": true,\n    \"any\": true,\n    \"sub\": true,\n    \"modules\": true,\n    \"a\": true,\n    \"component\": true,\n    \"(@Component()\": true,\n    \"decorator's\": true,\n    \"'providers'\": true,\n    \"property)\\\"\": true,\n    \"file\": \"./samples/ng/using-service.module.ts\"\n  }), \"import { BrowserModule } from '@angular/platform-browser';\\nimport { NgModule } from '@angular/core';\\n\\nimport { AppComponent } from './app.component';\\nimport { CartService } from './cart.service';\\n\\n@NgModule({\\n  declarations: [AppComponent],\\n  imports: [BrowserModule],\\n  providers: [CartService],\\n  bootstrap: [AppComponent],\\n})\\nexport class AppModule {}\\n\"))), mdx(Step, {\n    title: \"Usage: Inject It\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"13 subtitle=\\\"access context using the custom hook exposed\\\"\",\n    \"subtitle\": \"\\\"access\",\n    \"context\": true,\n    \"using\": true,\n    \"the\": true,\n    \"custom\": true,\n    \"hook\": true,\n    \"exposed\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"14 subtitle=\\\"inject the service in the constructor wherever needed\\\" file=./samples/ng/app.component.ts\",\n    \"subtitle\": \"\\\"inject\",\n    \"the\": true,\n    \"service\": true,\n    \"in\": true,\n    \"constructor\": true,\n    \"wherever\": true,\n    \"needed\\\"\": true,\n    \"file\": \"./samples/ng/app.component.ts\"\n  }), \"import { Component } from '@angular/core';\\nimport { CartService } from './cart.service';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: `\\n    <div>\\n      Cart: {cartService.count}\\n    </div>  \\n  `\\n  styleUrls: ['./app.component.scss'],\\n})\\nexport class AppComponent {\\n  constructor(public cartService: CartService) {}\\n}\\n\"))), mdx(Step, {\n    title: \"Usage: Use It\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"15 subtitle=\\\"use the members in context\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"members\": true,\n    \"in\": true,\n    \"context\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8 subtitle=\\\"use the members in service\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"members\": true,\n    \"in\": true,\n    \"service\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      padding: '15%',\n      width: '100%'\n    }\n  }, mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Next Up\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  })))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Component Composition\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Form\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Lifecycle Hooks\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"HTTP Requests\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Modules\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Ecosystem\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Routing\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Lazy Loading\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  })))))), mdx(\"hr\", null), mdx(\"h1\", null, \"Part 2: ADVANCED\"), mdx(\"h4\", null, \"7th Dec 2020\"), mdx(\"hr\", null), mdx(\"h1\", null, \"ADVANCED\"), mdx(\"h2\", null, \"Component Composition\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(BasicDogsList, {\n    mdxType: \"BasicDogsList\"\n  })), mdx(Step, {\n    subtitle: \"How do we build this?\",\n    mdxType: \"Step\"\n  }, mdx(BasicDogsList, {\n    mdxType: \"BasicDogsList\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"One way is to define all in one component\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./samples/react/List/BasicDogsList.js\",\n    \"file\": \"./samples/react/List/BasicDogsList.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  return (\\n    <div className={classes.root}>\\n      <div className={classes.item}>\\n        <div\\n          className={classes.itemIcon}\\n          style={{\\n            '--url': `url('https://tinyurl.com/yyb53oeu')`,\\n          }}\\n        />\\n        <div className={classes.itemContent}>Golden Retriever</div>\\n      </div>\\n\\n      <div className={classes.item}>\\n        <div\\n          className={classes.itemIcon}\\n          style={{\\n            '--url': `url('https://tinyurl.com/y2x5yxmq')`,\\n          }}\\n        />\\n        <div className={classes.itemContent}>Husky</div>\\n      </div>\\n\\n      <div className={classes.item}>\\n        <div\\n          className={classes.itemIcon}\\n          style={{\\n            '--url': `url('https://tinyurl.com/y6svov4s')`,\\n          }}\\n        />\\n        <div className={classes.itemContent}>Pug</div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"file=./samples/ng/list/basic-dogs-list.component.html\",\n    \"file\": \"./samples/ng/list/basic-dogs-list.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('https://tinyurl.com/yyb53oeu')\\\"\\n    />\\n    <div class=\\\"item-content\\\">Golden Retriever</div>\\n  </div>\\n\\n  <div class=\\\"item\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('https://tinyurl.com/y2x5yxmq')\\\"\\n    />\\n    <div class=\\\"item-content\\\">Husky</div>\\n  </div>\\n\\n  <div class=\\\"item\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('https://tinyurl.com/y6svov4s')\\\"\\n    />\\n    <div class=\\\"item-content\\\">Pug</div>\\n  </div>\\n</div>\\n\"))), mdx(Step, {\n    subtitle: \"Notice the repetitions\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:15\",\n    \"7:15\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:8\",\n    \"2:8\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Extract dogs into an array\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:18 subtitle=\\\"define dogs constant in the component function\\\" file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"5:18\": true,\n    \"subtitle\": \"\\\"define\",\n    \"dogs\": true,\n    \"constant\": true,\n    \"in\": true,\n    \"the\": true,\n    \"component\": true,\n    \"function\\\"\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"9:22 subtitle=\\\"define dogs property on the component class\\\" file=./samples/ng/list/basic-dogs-list-using-for.component.ts\",\n    \"9:22\": true,\n    \"subtitle\": \"\\\"define\",\n    \"dogs\": true,\n    \"property\": true,\n    \"on\": true,\n    \"the\": true,\n    \"component\": true,\n    \"class\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for.component.ts\"\n  }), \"import { Component } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-list',\\n  templateUrl: './list.component.html',\\n  styleUrls: ['./list.component.scss'],\\n})\\nexport class ListComponent {\\n  dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n}\\n\"))), mdx(Step, {\n    title: \"Simplify the code using loop\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"22:34 subtitle=\\\"Using Array.prototype.map() function\\\" file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"22:34\": true,\n    \"subtitle\": \"\\\"Using\",\n    \"Array.prototype.map()\": true,\n    \"function\\\"\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2:8 subtitle=\\\"Using ngFor structural directive\\\" file=./samples/ng/list/basic-dogs-list-using-for.component.html\",\n    \"2:8\": true,\n    \"subtitle\": \"\\\"Using\",\n    \"ngFor\": true,\n    \"structural\": true,\n    \"directive\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\" *ngFor=\\\"let dog of dogs\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('{{dog.imageUrl}}')\\\"\\n    />\\n    <div class=\\\"item-content\\\">{{dog.name}}</div>\\n  </div>\\n</div>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Don't miss the key in React\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"24[41:55] subtitle=\\\"notice the key prop\\\"  file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"24[41:55]\": true,\n    \"subtitle\": \"\\\"notice\",\n    \"the\": true,\n    \"key\": true,\n    \"prop\\\"\": true,\n    \"\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2:8 subtitle=\\\"No key needed here\\\" file=./samples/ng/list/basic-dogs-list-using-for.component.html\",\n    \"2:8\": true,\n    \"subtitle\": \"\\\"No\",\n    \"key\": true,\n    \"needed\": true,\n    \"here\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\" *ngFor=\\\"let dog of dogs\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('{{dog.imageUrl}}')\\\"\\n    />\\n    <div class=\\\"item-content\\\">{{dog.name}}</div>\\n  </div>\\n</div>\\n\"))), mdx(Step, {\n    title: \"Don't miss the key in React\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"24[41:55] subtitle=\\\"Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. Refer: https://reactjs.org/docs/lists-and-keys.html\\\"  file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"24[41:55]\": true,\n    \"subtitle\": \"\\\"Keys\",\n    \"help\": true,\n    \"React\": true,\n    \"identify\": true,\n    \"which\": true,\n    \"items\": true,\n    \"have\": true,\n    \"changed,\": true,\n    \"are\": true,\n    \"added,\": true,\n    \"or\": true,\n    \"removed.\": true,\n    \"Keys\": true,\n    \"should\": true,\n    \"be\": true,\n    \"given\": true,\n    \"to\": true,\n    \"the\": true,\n    \"elements\": true,\n    \"inside\": true,\n    \"array\": true,\n    \"give\": true,\n    \"a\": true,\n    \"stable\": true,\n    \"identity.\": true,\n    \"Refer:\": true,\n    \"https://reactjs.org/docs/lists-and-keys.html\\\"\": true,\n    \"\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2:8 subtitle=\\\"No key needed here\\\" file=./samples/ng/list/basic-dogs-list-using-for.component.html\",\n    \"2:8\": true,\n    \"subtitle\": \"\\\"No\",\n    \"key\": true,\n    \"needed\": true,\n    \"here\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\" *ngFor=\\\"let dog of dogs\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('{{dog.imageUrl}}')\\\"\\n    />\\n    <div class=\\\"item-content\\\">{{dog.name}}</div>\\n  </div>\\n</div>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Can do in Angular too\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"24[41:55] file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"24[41:55]\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"24:26 subtitle=\\\"to minimize churn in the DOM, we can define a trackBy function to achieve the same\\\" file=./samples/ng/list/basic-dogs-list-using-for-trackby.component.ts\",\n    \"24:26\": true,\n    \"subtitle\": \"\\\"to\",\n    \"minimize\": true,\n    \"churn\": true,\n    \"in\": true,\n    \"the\": true,\n    \"DOM,\": true,\n    \"we\": true,\n    \"can\": true,\n    \"define\": true,\n    \"a\": true,\n    \"trackBy\": true,\n    \"function\": true,\n    \"to\": true,\n    \"achieve\": true,\n    \"same\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for-trackby.component.ts\"\n  }), \"import { Component } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-list',\\n  templateUrl: './list.component.html',\\n  styleUrls: ['./list.component.scss'],\\n})\\nexport class ListComponent {\\n  dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  trackByDogName = (index: number, dog: Dog) => {\\n    return dog.name;\\n  };\\n}\\n\"))), mdx(Step, {\n    title: \"Can do in Angular too\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"24[41:55] file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"24[41:55]\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2[44:68] subtitle=\\\"use trackBy in template\\\" file=./samples/ng/list/basic-dogs-list-using-for-trackby.component.html\",\n    \"2[44:68]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"trackBy\": true,\n    \"in\": true,\n    \"template\\\"\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for-trackby.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\" *ngFor=\\\"let dog of dogs; trackBy:trackByDogName\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('{{dog.imageUrl}}')\\\"\\n    />\\n    <div class=\\\"item-content\\\">{{dog.name}}</div>\\n  </div>\\n</div>\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"What if for another page we wanted the dog image to be on the right within the same list?\"), mdx(\"p\", null, \"or\"), mdx(\"p\", null, \"For the dog item to look different?\"), mdx(\"hr\", null), mdx(\"p\", null, \"This is where component composition helps\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Component Composition\",\n    subtitle: \"Let's start where we left off. We want to be able to send in different list items\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"22:34 file=./samples/react/List/BasicDogsListUsingFor.js\",\n    \"22:34\": true,\n    \"file\": \"./samples/react/List/BasicDogsListUsingFor.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = () => {\\n  const dogs = [\\n    {\\n      imageUrl: 'https://tinyurl.com/yyb53oeu',\\n      name: 'Golden Retriever',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y2x5yxmq',\\n      name: 'Husky',\\n    },\\n    {\\n      imageUrl: 'https://tinyurl.com/y6svov4s',\\n      name: 'Pug',\\n    },\\n  ];\\n\\n  return (\\n    <div className={classes.root}>\\n      {dogs.map(dog => {\\n        return (\\n          <div className={classes.item} key={dog.name}>\\n            <div\\n              className={classes.itemIcon}\\n              style={{\\n                '--url': `url('${dog.imageUrl}')`,\\n              }}\\n            />\\n            <div className={classes.itemContent}>{dog.name}</div>\\n          </div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2:8 file=./samples/ng/list/basic-dogs-list-using-for.component.html\",\n    \"2:8\": true,\n    \"file\": \"./samples/ng/list/basic-dogs-list-using-for.component.html\"\n  }), \"<div class=\\\"root\\\">\\n  <div class=\\\"item\\\" *ngFor=\\\"let dog of dogs\\\">\\n    <div\\n      class=\\\"item-icon\\\"\\n      style=\\\"--url: url('{{dog.imageUrl}}')\\\"\\n    />\\n    <div class=\\\"item-content\\\">{{dog.name}}</div>\\n  </div>\\n</div>\\n\"))), mdx(Step, {\n    title: \"Component Composition\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4[15:27],5[40:49] subtitle=\\\"replace the items loop with children prop\\\" file=./samples/react/List/ListWithChildren.js\",\n    \"4[15:27],5[40:49]\": true,\n    \"subtitle\": \"\\\"replace\",\n    \"the\": true,\n    \"items\": true,\n    \"loop\": true,\n    \"with\": true,\n    \"children\": true,\n    \"prop\\\"\": true,\n    \"file\": \"./samples/react/List/ListWithChildren.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst List = ({ children }) => {\\n  return <div className={classes.root}>{children}</div>;\\n};\\n\\nexport default List;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"7[7:32] subtitle=\\\"replace the items loop with ng-content\\\" file=./samples/ng/list/list-with-children.ts\",\n    \"7[7:32]\": true,\n    \"subtitle\": \"\\\"replace\",\n    \"the\": true,\n    \"items\": true,\n    \"loop\": true,\n    \"with\": true,\n    \"ng-content\\\"\": true,\n    \"file\": \"./samples/ng/list/list-with-children.ts\"\n  }), \"import { Component, Input } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-list',\\n  template: `\\n    <div class=\\\"root\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  `,\\n  styles: [\\n    // ...\\n  ],\\n})\\nexport class ListComponent {}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Component Composition\",\n    subtitle: \"Extract the item into its own component\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./samples/react/List/ListItem.js\",\n    \"file\": \"./samples/react/List/ListItem.js\"\n  }), \"import React from 'react';\\nimport classes from './List.module.css';\\n\\nconst ListItem = ({ imageUrl, name }) => {\\n  return (\\n    <div className={classes.item}>\\n      <div\\n        className={classes.itemIcon}\\n        style={{\\n          '--url': `url('${imageUrl}')`,\\n        }}\\n      />\\n      <div className={classes.itemContent}>{name}</div>\\n    </div>\\n  );\\n};\\n\\nexport default ListItemImageRight;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"file=./samples/ng/list/list-item.ts\",\n    \"file\": \"./samples/ng/list/list-item.ts\"\n  }), \"import { Component, Input } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-list-item',\\n  template: `\\n    <div class=\\\"item\\\">\\n      <div\\n        class=\\\"item-icon\\\"\\n        style=\\\"--url: url('{{imageUrl}}')\\\"\\n      />\\n      <div class=\\\"item-content\\\">{{name}}</div>\\n    </div>\\n  `,\\n  styles: [\\n    // ...\\n  ],\\n})\\nexport class ListItemComponent {\\n  @Input() name: string;\\n\\n  @Input() imageUrl: string;\\n}\\n\"))), mdx(Step, {\n    title: \"Component Composition\",\n    subtitle: \"Use the components in a parent inside open and close tags of List component\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<List>\\n  <ListItem name=\\\"Golden Retriever\\\" imageUrl=\\\"\\\" />\\n  <ListItem name=\\\"Husky\\\" imageUrl=\\\"\\\" />\\n  <ListItem name=\\\"Pug\\\" imageUrl=\\\"\\\" />\\n</List>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<app-list>\\n  <app-list-item name=\\\"Golden Retriever\\\" imageUrl=\\\"\\\"></app-list-item>\\n  <app-list-item name=\\\"Husky\\\" imageUrl=\\\"\\\"></app-list-item>\\n  <app-list-item name=\\\"Pug\\\" imageUrl=\\\"\\\"></app-list-item>\\n</app-list>\\n\"))), mdx(Step, {\n    title: \"Component Composition\",\n    subtitle: \"Can always use loops\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<List>\\n  {dogs.map(dog => (\\n    <ListItem key={dog.name} name={dog.name} imageUrl={dog.imageUrl} />\\n  ))}\\n</List>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<app-list>\\n  <app-list-item\\n    *ngFor=\\\"let dog of dogs\\\"\\n    [name]=\\\"dog.name\\\"\\n    [imageUrl]=\\\"dog.imageUrl\\\"\\n  ></app-list-item>\\n</app-list>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Component Composition: Multiple Children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4[39:51],5[40:52],11[21:57] subtitle=\\\"any prop can be given a valid JSX and used same as children prop\\\"\",\n    \"4[39:51],5[40:52],11[21:57]\": true,\n    \"subtitle\": \"\\\"any\",\n    \"prop\": true,\n    \"can\": true,\n    \"be\": true,\n    \"given\": true,\n    \"a\": true,\n    \"valid\": true,\n    \"JSX\": true,\n    \"and\": true,\n    \"used\": true,\n    \"same\": true,\n    \"as\": true,\n    \"children\": true,\n    \"prop\\\"\": true\n  }), \"const SplitPane = props => {\\n  return (\\n    <div className=\\\"SplitPane\\\">\\n      <div className=\\\"SplitPane-left\\\">{props.left}</div>\\n      <div className=\\\"SplitPane-right\\\">{props.right}</div>\\n    </div>\\n  );\\n};\\n\\nconst App = () => {\\n  return <SplitPane left={<Contacts />} right={<Chat />} />;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"1,3,4,7,9:15 subtitle=\\\"use select attribute on ng-content choose multiple children from its content\\\"\",\n    \"1,3,4,7,9:15\": true,\n    \"subtitle\": \"\\\"use\",\n    \"select\": true,\n    \"attribute\": true,\n    \"on\": true,\n    \"ng-content\": true,\n    \"choose\": true,\n    \"multiple\": true,\n    \"children\": true,\n    \"from\": true,\n    \"its\": true,\n    \"content\\\"\": true\n  }), \"<!-- split-pane.component.html -->\\n<div class=\\\"split-pane\\\">\\n  <ng-content select=\\\".split-pane-left\\\"></ng-content>\\n  <ng-content select=\\\".split-pane-right\\\"></ng-content>\\n</div>\\n\\n<!-- app.component.html -->\\n<app-split-pane>\\n  <div class=\\\"split-pane-left\\\">\\n    <!-- left pane content -->\\n  </div>\\n\\n  <div class=\\\"split-pane-right\\\">\\n    <!-- right pane content -->\\n  </div>\\n</app-split-pane>\\n\"))), mdx(Step, {\n    title: \"Component Composition: Multiple Children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4[39:51],5[40:52],11[21:57] subtitle=\\\"any prop can be given a valid JSX and used same as children prop\\\"\",\n    \"4[39:51],5[40:52],11[21:57]\": true,\n    \"subtitle\": \"\\\"any\",\n    \"prop\": true,\n    \"can\": true,\n    \"be\": true,\n    \"given\": true,\n    \"a\": true,\n    \"valid\": true,\n    \"JSX\": true,\n    \"and\": true,\n    \"used\": true,\n    \"same\": true,\n    \"as\": true,\n    \"children\": true,\n    \"prop\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"1,3,4,7,9:15 subtitle=\\\"can use any valid CSS selector for selections\\\"\",\n    \"1,3,4,7,9:15\": true,\n    \"subtitle\": \"\\\"can\",\n    \"use\": true,\n    \"any\": true,\n    \"valid\": true,\n    \"CSS\": true,\n    \"selector\": true,\n    \"for\": true,\n    \"selections\\\"\": true\n  }), \"<!-- split-pane.component.html -->\\n<div class=\\\"split-pane\\\">\\n  <ng-content select=\\\"aside\\\"></ng-content>\\n  <ng-content select=\\\"main\\\"></ng-content>\\n</div>\\n\\n<!-- app.component.html -->\\n<app-split-pane>\\n  <aside class=\\\"split-pane-left\\\">\\n    <!-- left pane content -->\\n  </aside>\\n\\n  <main class=\\\"split-pane-right\\\">\\n    <!-- right pane content -->\\n  </main>\\n</app-split-pane>\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"What if our List wants to pass the data into ListItem components?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Passing data to children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[40:58] subtitle=\\\"use render function prop to pass context to children\\\"\",\n    \"2[40:58]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"render\": true,\n    \"function\": true,\n    \"prop\": true,\n    \"to\": true,\n    \"pass\": true,\n    \"context\": true,\n    \"children\\\"\": true\n  }), \"const List = props => {\\n  return <div>{props.items.map(item => props.render(item))}</div>;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7 subtitle=\\\"use ngTemplateOutlet directive to pass context to children\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"ngTemplateOutlet\": true,\n    \"directive\": true,\n    \"to\": true,\n    \"pass\": true,\n    \"context\": true,\n    \"children\\\"\": true\n  }), \"import { Component, ContentChild, TemplateRef } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-list',\\n  template: `\\n    <div *ngFor=\\\"let item of items\\\">\\n      <ng-container *ngTemplateOutlet=\\\"template; context: dog\\\"></ng-container>\\n    </div>\\n  `,\\n})\\nclass ListComponent {\\n  @ContentChild('item', { static: false })\\n  template: TemplateRef<any>;\\n\\n  @Input() items: any[];\\n}\\n\"))), mdx(Step, {\n    title: \"Passing data to children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[40:58] subtitle=\\\"use render function prop to pass context to children\\\"\",\n    \"2[40:58]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"render\": true,\n    \"function\": true,\n    \"prop\": true,\n    \"to\": true,\n    \"pass\": true,\n    \"context\": true,\n    \"children\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7[40:48],12:13  subtitle=\\\"query for the template from content\\\"\",\n    \"7[40:48],12:13\": true,\n    \"\": true,\n    \"subtitle\": \"\\\"query\",\n    \"for\": true,\n    \"the\": true,\n    \"template\": true,\n    \"from\": true,\n    \"content\\\"\": true\n  }), \"\"))), mdx(Step, {\n    title: \"Passing data to children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[40:58] subtitle=\\\"use render function prop to pass context to children\\\"\",\n    \"2[40:58]\": true,\n    \"subtitle\": \"\\\"use\",\n    \"render\": true,\n    \"function\": true,\n    \"prop\": true,\n    \"to\": true,\n    \"pass\": true,\n    \"context\": true,\n    \"children\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12[18:22]  subtitle=\\\"note the query selector here for querying template\\\"\",\n    \"12[18:22]\": true,\n    \"\": true,\n    \"subtitle\": \"\\\"note\",\n    \"the\": true,\n    \"query\": true,\n    \"selector\": true,\n    \"here\": true,\n    \"for\": true,\n    \"querying\": true,\n    \"template\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Passing data to children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 subtitle=\\\"pass a function to render prop to get item data into the function\\\"\",\n    \"subtitle\": \"\\\"pass\",\n    \"a\": true,\n    \"function\": true,\n    \"to\": true,\n    \"render\": true,\n    \"prop\": true,\n    \"get\": true,\n    \"item\": true,\n    \"data\": true,\n    \"into\": true,\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"<List\\n  render={item => <ListItem {...item} />}\\n  items={\\n    [\\n      /* items here */\\n    ]\\n  }\\n/>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"2:4 subtitle=\\\"use ng-template to extract the item context from parent\\\"\",\n    \"2:4\": true,\n    \"subtitle\": \"\\\"use\",\n    \"ng-template\": true,\n    \"to\": true,\n    \"extract\": true,\n    \"the\": true,\n    \"item\": true,\n    \"context\": true,\n    \"from\": true,\n    \"parent\\\"\": true\n  }), \"<app-list [items]=\\\"[/* items here */]\\\">\\n  <ng-template #item let-item=\\\"item\\\">\\n    <app-list-item [name]=\\\"item.name\\\" imageUrl=\\\"item.imageUrl\\\"> </app-list-item>\\n  </ng-template>\\n</app-list>\\n\"))), mdx(Step, {\n    title: \"Passing data to children\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2 subtitle=\\\"pass a function to render prop to get item data into the function\\\"\",\n    \"subtitle\": \"\\\"pass\",\n    \"a\": true,\n    \"function\": true,\n    \"to\": true,\n    \"render\": true,\n    \"prop\": true,\n    \"get\": true,\n    \"item\": true,\n    \"data\": true,\n    \"into\": true,\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[16:21] subtitle=\\\"remember the 'item' selector used in the parent @ContentChild() query\\\"\",\n    \"2[16:21]\": true,\n    \"subtitle\": \"\\\"remember\",\n    \"the\": true,\n    \"'item'\": true,\n    \"selector\": true,\n    \"used\": true,\n    \"in\": true,\n    \"parent\": true,\n    \"@ContentChild()\": true,\n    \"query\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"ADVANCED\"), mdx(\"h2\", null, \"Lifecycle Hooks\"), mdx(\"h6\", null, \"not to be confused with React Hooks\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"LifeCycle: Construction\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4:11 subtitle=\\\"function itself acts as a constructor\\\" file=./samples/react/MyComp.js\",\n    \"4:11\": true,\n    \"subtitle\": \"\\\"function\",\n    \"itself\": true,\n    \"acts\": true,\n    \"as\": true,\n    \"a\": true,\n    \"constructor\\\"\": true,\n    \"file\": \"./samples/react/MyComp.js\"\n  }), \"import React from 'react';\\nimport './MyComp.css';\\n\\nconst MyComp = () => {\\n  return (\\n    <div>\\n      <h1>My React Template</h1>\\n      <p>Lorem ipsum dolor sit amet.</p>\\n    </div>\\n  );\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"36\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"36 subtitle=\\\"has a specific constructor\\\" file=./samples/ng/my-comp/my-comp-1.component.ts\",\n    \"subtitle\": \"\\\"has\",\n    \"a\": true,\n    \"specific\": true,\n    \"constructor\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp-1.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Input() age: number;\\n\\n  count = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes.name) {\\n      // name has changed\\n    }\\n\\n    if (changes.age) {\\n      // age has changed\\n    }\\n\\n    // Doesn't work as count is not an input\\n    // (i.e., not decorated with @Input())\\n    if (changes.count || changes.name) {\\n      // does not execute\\n    }\\n  }\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"LifeCycle: Construction\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:11 subtitle=\\\"gets called on every re-render\\\"\",\n    \"4:11\": true,\n    \"subtitle\": \"\\\"gets\",\n    \"called\": true,\n    \"on\": true,\n    \"every\": true,\n    \"re-render\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"36\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"36 subtitle=\\\"only called once during component instantiation\\\"\",\n    \"subtitle\": \"\\\"only\",\n    \"called\": true,\n    \"once\": true,\n    \"during\": true,\n    \"component\": true,\n    \"instantiation\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"LifeCycle: Init\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6:14 subtitle=\\\"useEffect hook with an empty array gets called once after component is rendered\\\" file=./samples/react/MyComp/MyComp1.js\",\n    \"6:14\": true,\n    \"subtitle\": \"\\\"useEffect\",\n    \"hook\": true,\n    \"with\": true,\n    \"an\": true,\n    \"empty\": true,\n    \"array\": true,\n    \"gets\": true,\n    \"called\": true,\n    \"once\": true,\n    \"after\": true,\n    \"component\": true,\n    \"is\": true,\n    \"rendered\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp1.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = props => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // name has changed\\n  }, [props.name]);\\n\\n  // update\\n  useEffect(() => {\\n    // age has changed\\n  }, [props.age]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // either name or count has changed\\n  }, [props.name, count]);\\n\\n  useLayoutEffect(() => {\\n    // on init synchronous\\n  }, []);\\n\\n  useEffect(\\n    () => {\\n      // effect\\n      return () => {\\n        // cleanup\\n      };\\n    },\\n    [\\n      /* dependencies */\\n    ]\\n  );\\n\\n  useEffect(() => {\\n    // called on every re-render\\n  });\\n\\n  return <div>{/* template */}</div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"71:77 subtitle=\\\"these get called after each change detection\\\" file=./samples/ng/my-comp/my-comp-1.component.ts\",\n    \"71:77\": true,\n    \"subtitle\": \"\\\"these\",\n    \"get\": true,\n    \"called\": true,\n    \"after\": true,\n    \"each\": true,\n    \"change\": true,\n    \"detection\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp-1.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Input() age: number;\\n\\n  count = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes.name) {\\n      // name has changed\\n    }\\n\\n    if (changes.age) {\\n      // age has changed\\n    }\\n\\n    // Doesn't work as count is not an input\\n    // (i.e., not decorated with @Input())\\n    if (changes.count || changes.name) {\\n      // does not execute\\n    }\\n  }\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"LifeCycle: Init\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"32:34 subtitle=\\\"useLayoutEffect hook with empty array is called once synchronously on init\\\"\",\n    \"32:34\": true,\n    \"subtitle\": \"\\\"useLayoutEffect\",\n    \"hook\": true,\n    \"with\": true,\n    \"empty\": true,\n    \"array\": true,\n    \"is\": true,\n    \"called\": true,\n    \"once\": true,\n    \"synchronously\": true,\n    \"on\": true,\n    \"init\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"54:65 subtitle=\\\"these get called only once on init\\\"\",\n    \"54:65\": true,\n    \"subtitle\": \"\\\"these\",\n    \"get\": true,\n    \"called\": true,\n    \"only\": true,\n    \"once\": true,\n    \"on\": true,\n    \"init\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"LifeCycle: Changes\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"16:19 subtitle=\\\"use useEffect hook with variable to listen the changes for in its dependency array\\\" file=./samples/react/MyComp/MyComp1.js\",\n    \"16:19\": true,\n    \"subtitle\": \"\\\"use\",\n    \"useEffect\": true,\n    \"hook\": true,\n    \"with\": true,\n    \"variable\": true,\n    \"to\": true,\n    \"listen\": true,\n    \"the\": true,\n    \"changes\": true,\n    \"for\": true,\n    \"in\": true,\n    \"its\": true,\n    \"dependency\": true,\n    \"array\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp1.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = props => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // name has changed\\n  }, [props.name]);\\n\\n  // update\\n  useEffect(() => {\\n    // age has changed\\n  }, [props.age]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // either name or count has changed\\n  }, [props.name, count]);\\n\\n  useLayoutEffect(() => {\\n    // on init synchronous\\n  }, []);\\n\\n  useEffect(\\n    () => {\\n      // effect\\n      return () => {\\n        // cleanup\\n      };\\n    },\\n    [\\n      /* dependencies */\\n    ]\\n  );\\n\\n  useEffect(() => {\\n    // called on every re-render\\n  });\\n\\n  return <div>{/* template */}</div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"30:32,38:52 subtitle=\\\"ngOnChanges gets called once initially and on subsequent @Input() member changes\\\" file=./samples/ng/my-comp/my-comp-1.component.ts\",\n    \"30:32,38:52\": true,\n    \"subtitle\": \"\\\"ngOnChanges\",\n    \"gets\": true,\n    \"called\": true,\n    \"once\": true,\n    \"initially\": true,\n    \"and\": true,\n    \"on\": true,\n    \"subsequent\": true,\n    \"@Input()\": true,\n    \"member\": true,\n    \"changes\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp-1.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Input() age: number;\\n\\n  count = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes.name) {\\n      // name has changed\\n    }\\n\\n    if (changes.age) {\\n      // age has changed\\n    }\\n\\n    // Doesn't work as count is not an input\\n    // (i.e., not decorated with @Input())\\n    if (changes.count || changes.name) {\\n      // does not execute\\n    }\\n  }\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"LifeCycle: Changes\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:24 subtitle=\\\"act on specific prop changes separately\\\"\",\n    \"16:24\": true,\n    \"subtitle\": \"\\\"act\",\n    \"on\": true,\n    \"specific\": true,\n    \"prop\": true,\n    \"changes\": true,\n    \"separately\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"39:45 subtitle=\\\"identify which input changed in ngOnChanges\\\"\",\n    \"39:45\": true,\n    \"subtitle\": \"\\\"identify\",\n    \"which\": true,\n    \"input\": true,\n    \"changed\": true,\n    \"in\": true,\n    \"ngOnChanges\\\"\": true\n  }), \"\"))), mdx(Step, {\n    title: \"LifeCycle: Changes\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"26:30 subtitle=\\\"act on multiple value changes. Note here 'count' is a component state not a prop\\\"\",\n    \"26:30\": true,\n    \"subtitle\": \"\\\"act\",\n    \"on\": true,\n    \"multiple\": true,\n    \"value\": true,\n    \"changes.\": true,\n    \"Note\": true,\n    \"here\": true,\n    \"'count'\": true,\n    \"is\": true,\n    \"a\": true,\n    \"component\": true,\n    \"state\": true,\n    \"not\": true,\n    \"prop\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff true\",\n    \"metastring\": \"47:51 subtitle=\\\"ngOnChanges only gets called on @Input() member changes but not on class member changes\\\"\",\n    \"47:51\": true,\n    \"subtitle\": \"\\\"ngOnChanges\",\n    \"only\": true,\n    \"gets\": true,\n    \"called\": true,\n    \"on\": true,\n    \"@Input()\": true,\n    \"member\": true,\n    \"changes\": true,\n    \"but\": true,\n    \"not\": true,\n    \"changes\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"LifeCycle: Destroy\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"39:41 subtitle=\\\"return function inside a useEffect callback is called on destroy\\\" file=./samples/react/MyComp/MyComp1.js\",\n    \"39:41\": true,\n    \"subtitle\": \"\\\"return\",\n    \"function\": true,\n    \"inside\": true,\n    \"a\": true,\n    \"useEffect\": true,\n    \"callback\": true,\n    \"is\": true,\n    \"called\": true,\n    \"on\": true,\n    \"destroy\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp1.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = props => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // name has changed\\n  }, [props.name]);\\n\\n  // update\\n  useEffect(() => {\\n    // age has changed\\n  }, [props.age]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // either name or count has changed\\n  }, [props.name, count]);\\n\\n  useLayoutEffect(() => {\\n    // on init synchronous\\n  }, []);\\n\\n  useEffect(\\n    () => {\\n      // effect\\n      return () => {\\n        // cleanup\\n      };\\n    },\\n    [\\n      /* dependencies */\\n    ]\\n  );\\n\\n  useEffect(() => {\\n    // called on every re-render\\n  });\\n\\n  return <div>{/* template */}</div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"79:81 subtitle=\\\"ngOnDestroy function is called on destroy\\\" file=./samples/ng/my-comp/my-comp-1.component.ts\",\n    \"79:81\": true,\n    \"subtitle\": \"\\\"ngOnDestroy\",\n    \"function\": true,\n    \"is\": true,\n    \"called\": true,\n    \"on\": true,\n    \"destroy\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp-1.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Input() age: number;\\n\\n  count = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes.name) {\\n      // name has changed\\n    }\\n\\n    if (changes.age) {\\n      // age has changed\\n    }\\n\\n    // Doesn't work as count is not an input\\n    // (i.e., not decorated with @Input())\\n    if (changes.count || changes.name) {\\n      // does not execute\\n    }\\n  }\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"LifeCycle: Every-Rerender\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"48:50 subtitle=\\\"useEffect without the dependency array will be called on every re-render\\\" file=./samples/react/MyComp/MyComp1.js\",\n    \"48:50\": true,\n    \"subtitle\": \"\\\"useEffect\",\n    \"without\": true,\n    \"the\": true,\n    \"dependency\": true,\n    \"array\": true,\n    \"will\": true,\n    \"be\": true,\n    \"called\": true,\n    \"on\": true,\n    \"every\": true,\n    \"re-render\\\"\": true,\n    \"file\": \"./samples/react/MyComp/MyComp1.js\"\n  }), \"import React, { useState, useEffect } from 'react';\\n\\nconst MyComp = props => {\\n  const [count, setCount] = useState(0);\\n\\n  // init\\n  useEffect(\\n    () => {\\n      // Do something on\\n      // initialization\\n    },\\n    [] /* This should be empty array \\n    for useEffect to act as init */\\n  );\\n\\n  // update\\n  useEffect(() => {\\n    // name has changed\\n  }, [props.name]);\\n\\n  // update\\n  useEffect(() => {\\n    // age has changed\\n  }, [props.age]);\\n\\n  // update on multiple\\n  // state or prop changes\\n  useEffect(() => {\\n    // either name or count has changed\\n  }, [props.name, count]);\\n\\n  useLayoutEffect(() => {\\n    // on init synchronous\\n  }, []);\\n\\n  useEffect(\\n    () => {\\n      // effect\\n      return () => {\\n        // cleanup\\n      };\\n    },\\n    [\\n      /* dependencies */\\n    ]\\n  );\\n\\n  useEffect(() => {\\n    // called on every re-render\\n  });\\n\\n  return <div>{/* template */}</div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"67:69 subtitle=\\\"ngDoCheck will be called on every change detection run\\\" file=./samples/ng/my-comp/my-comp-1.component.ts\",\n    \"67:69\": true,\n    \"subtitle\": \"\\\"ngDoCheck\",\n    \"will\": true,\n    \"be\": true,\n    \"called\": true,\n    \"on\": true,\n    \"every\": true,\n    \"change\": true,\n    \"detection\": true,\n    \"run\\\"\": true,\n    \"file\": \"./samples/ng/my-comp/my-comp-1.component.ts\"\n  }), \"import {\\n  AfterContentInit,\\n  AfterViewInit,\\n  Component,\\n  DoCheck,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  AfterViewChecked,\\n  AfterContentChecked,\\n  Input,\\n} from '@angular/core';\\n\\n@Component({\\n  selector: 'my-comp',\\n  templateUrl: './my-comp.component.html',\\n  styleUrls: ['./my-comp.component.scss'],\\n})\\nexport class MyCompComponent\\n  implements\\n    OnChanges,\\n    OnInit,\\n    DoCheck,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    AfterContentInit,\\n    AfterContentChecked,\\n    OnDestroy {\\n  @Input() name: string;\\n\\n  @Input() age: number;\\n\\n  count = 0;\\n\\n  constructor() {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes.name) {\\n      // name has changed\\n    }\\n\\n    if (changes.age) {\\n      // age has changed\\n    }\\n\\n    // Doesn't work as count is not an input\\n    // (i.e., not decorated with @Input())\\n    if (changes.count || changes.name) {\\n      // does not execute\\n    }\\n  }\\n\\n  ngOnInit(): void {\\n    // Do something on\\n    // initialization\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Code here\\n  }\\n\\n  ngDoCheck(): void {\\n    // Code here\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    // Code here\\n  }\\n\\n  ngAfterContentChecked(): void {\\n    // Code here\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Code here\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"LifeCycle: Every-Rerender\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"48:50 subtitle=\\\"useEffect without the dependency array will be called on every re-render\\\"\",\n    \"48:50\": true,\n    \"subtitle\": \"\\\"useEffect\",\n    \"without\": true,\n    \"the\": true,\n    \"dependency\": true,\n    \"array\": true,\n    \"will\": true,\n    \"be\": true,\n    \"called\": true,\n    \"on\": true,\n    \"every\": true,\n    \"re-render\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"67:69 subtitle=\\\"used to detect and act upon changes that Angular can't or won't detect on its own\\\"\",\n    \"67:69\": true,\n    \"subtitle\": \"\\\"used\",\n    \"to\": true,\n    \"detect\": true,\n    \"and\": true,\n    \"act\": true,\n    \"upon\": true,\n    \"changes\": true,\n    \"that\": true,\n    \"Angular\": true,\n    \"can't\": true,\n    \"or\": true,\n    \"won't\": true,\n    \"on\": true,\n    \"its\": true,\n    \"own\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      padding: '15%',\n      width: '100%'\n    }\n  }, mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Next Up\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"HTTP Requests\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Lazy Loading\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Form\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Ecosystem\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Modules\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Routing\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })))))), mdx(\"hr\", null), mdx(\"h1\", null, \"Part 3: ADVANCED CONTINUED\"), mdx(\"h4\", null, \"14th Dec 2020\"), mdx(\"hr\", null), mdx(\"h1\", null, \"ADVANCED\"), mdx(\"h2\", null, \"HTTP Requests\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"HTTP Package\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"subtitle=\\\"need an external package. We use 'Axios'\\\"\",\n    \"subtitle\": \"\\\"need\",\n    \"an\": true,\n    \"external\": true,\n    \"package.\": true,\n    \"We\": true,\n    \"use\": true,\n    \"'Axios'\\\"\": true\n  }), \"npm i -S axios\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"subtitle=\\\"has an in-built package\\\"\",\n    \"subtitle\": \"\\\"has\",\n    \"an\": true,\n    \"in-built\": true,\n    \"package\\\"\": true\n  }), \"@angular/common/http\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"HTTP Package: Provide\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"there is no need to provide for axios\\\"\",\n    \"subtitle\": \"\\\"there\",\n    \"is\": true,\n    \"no\": true,\n    \"need\": true,\n    \"to\": true,\n    \"provide\": true,\n    \"for\": true,\n    \"axios\\\"\": true\n  }), \"\\uD83E\\uDD37\\n// Nothing here\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1[22:38],6:9 subtitle=\\\"have to import HttpClientModule in the root NgModule (i.e., AppModule)\\\" file=./samples/ng/http.ts\",\n    \"1[22:38],6:9\": true,\n    \"subtitle\": \"\\\"have\",\n    \"to\": true,\n    \"import\": true,\n    \"HttpClientModule\": true,\n    \"in\": true,\n    \"the\": true,\n    \"root\": true,\n    \"NgModule\": true,\n    \"(i.e.,\": true,\n    \"AppModule)\\\"\": true,\n    \"file\": \"./samples/ng/http.ts\"\n  }), \"import { HttpClient, HttpClientModule } from '@angular/common/http';\\nimport { Component, Injectable, NgModule, OnInit } from '@angular/core';\\n\\n// app.module.ts\\n@NgModule({\\n  imports: [\\n    HttpClientModule,\\n    // rest of the imports\\n  ],\\n  // declarations, bootstrap, providers\\n})\\nexport class AppModule {}\\n\\n// my.service.ts\\n@Injectable({\\n  providedIn: 'root',\\n})\\nexport class MyService {\\n  constructor(private http: HttpClient) {}\\n\\n  getPosts() {\\n    return this.http.get('https://jsonplaceholder.typicode.com/posts');\\n  }\\n}\\n\\n// my-comp.component.ts\\n@Component({\\n  selector: 'app-my-comp',\\n  template: ` <div></div> `,\\n  providers: [MyService],\\n})\\nexport class MyCompComponent implements OnInit {\\n  // Inject the service\\n  constructor(private myService: MyService) {}\\n\\n  ngOnInit() {\\n    // use the service\\n    this.myService.getPosts().subscribe({\\n      next: (posts: Post[]) => {\\n        console.log('http result: posts', posts);\\n      },\\n      error: (err: any) => {\\n        console.error('http error', err);\\n      },\\n    });\\n  }\\n}\\n\"))), mdx(Step, {\n    title: \"HTTP Package: Instantiate\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1,5 subtitle=\\\"create an instance of axios\\\" file=./samples/react/http.js\",\n    \"1,5\": true,\n    \"subtitle\": \"\\\"create\",\n    \"an\": true,\n    \"instance\": true,\n    \"of\": true,\n    \"axios\\\"\": true,\n    \"file\": \"./samples/react/http.js\"\n  }), \"import Axios from 'axios';\\nimport React, { useEffect } from 'react';\\n\\n// postsService.js\\nconst http = Axios.create();\\n\\nexport const getPosts = async () => {\\n  const { data } = await http.get('https://jsonplaceholder.typicode.com/posts');\\n\\n  return data;\\n};\\n\\n// MyComp.js\\nimport { getPosts } from 'services/postsService';\\n\\nconst MyComp = () => {\\n  useEffect(() => {\\n    const serviceCall = async () => {\\n      try {\\n        const posts = await getPosts();\\n\\n        console.log('http result: posts', posts);\\n      } catch (err) {\\n        console.error('http error', error);\\n      }\\n    };\\n\\n    serviceCall();\\n  }, []);\\n\\n  return <div></div>;\\n};\\n\\nexport default MyComp;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"19 subtitle=\\\"let the Angular Dependency Injection (DI) do the instantiation\\\"\",\n    \"subtitle\": \"\\\"let\",\n    \"the\": true,\n    \"Angular\": true,\n    \"Dependency\": true,\n    \"Injection\": true,\n    \"(DI)\": true,\n    \"do\": true,\n    \"instantiation\\\"\": true\n  }), \"\"))), mdx(Step, {\n    title: \"HTTP Package: Use\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8 subtitle=\\\"use the instance in a service\\\"\",\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"instance\": true,\n    \"in\": true,\n    \"a\": true,\n    \"service\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"22 subtitle=\\\"📋\\\"\",\n    \"subtitle\": \"\\\"📋\\\"\"\n  }), \"\"))), mdx(Step, {\n    title: \"HTTP Package: Make the call\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14,18:28 subtitle=\\\"make the calls inside useEffect\\\"\",\n    \"14,18:28\": true,\n    \"subtitle\": \"\\\"make\",\n    \"the\": true,\n    \"calls\": true,\n    \"inside\": true,\n    \"useEffect\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"34,38:45 subtitle=\\\"make the calls inside ngOnInit\\\"\",\n    \"34,38:45\": true,\n    \"subtitle\": \"\\\"make\",\n    \"the\": true,\n    \"calls\": true,\n    \"inside\": true,\n    \"ngOnInit\\\"\": true\n  }), \"\"))), mdx(Step, {\n    title: \"HTTP Package: Make the call\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"18[25:38],19,20[23:40],23,25:26 subtitle=\\\"Promise based using async/await syntax\\\"\",\n    \"18[25:38],19,20[23:40],23,25:26\": true,\n    \"subtitle\": \"\\\"Promise\",\n    \"based\": true,\n    \"using\": true,\n    \"async/await\": true,\n    \"syntax\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"38[30:42],39,41:42,44:45 subtitle=\\\"RxJS Observables based\\\"\",\n    \"38[30:42],39,41:42,44:45\": true,\n    \"subtitle\": \"\\\"RxJS\",\n    \"Observables\": true,\n    \"based\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"useEffect & async\"), mdx(\"img\", {\n    src: useEffectAsync,\n    alt: \"useEffect & async\"\n  }), mdx(\"p\", null, \"Can't mark \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" callback function with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" direclty. Refer:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/javascript-in-plain-english/how-to-use-async-function-in-react-hook-useeffect-typescript-js-6204a788a435\"\n  }), \"How to use async function in React hooks useEffect (Typescript/JS)?\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/axios\"\n  }), \"Axios\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"ADVANCED\"), mdx(\"h2\", null, \"Form\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Form Package\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"subtitle=\\\"needs external packages. We use 'Formik' for forms and 'yup' for validations\\\"\",\n    \"subtitle\": \"\\\"needs\",\n    \"external\": true,\n    \"packages.\": true,\n    \"We\": true,\n    \"use\": true,\n    \"'Formik'\": true,\n    \"for\": true,\n    \"forms\": true,\n    \"and\": true,\n    \"'yup'\": true,\n    \"validations\\\"\": true\n  }), \"npm i -S formik yup\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"subtitle=\\\"has an in-built package\\\"\",\n    \"subtitle\": \"\\\"has\",\n    \"an\": true,\n    \"in-built\": true,\n    \"package\\\"\": true\n  }), \"@angular/forms\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://formik.org/docs/overview\"\n  }), \"Formik\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/yup\"\n  }), \"yup\"))), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"2588598c-369a-5047-8b21-374ae5c0498b","slug":"/ui-meetup-ng-for-react-devs","title":"Angular for React Devs and Vice Versa"}},"staticQueryHashes":[]}